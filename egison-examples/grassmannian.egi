(define $minor
  (lambda [%X $id1 $id2]
    (let {[$m (length id1)] [$n (length id2)]}
      (generate-tensor
        (lambda [$k $l]
          X_(nth k id1)_(nth l id2)) {m n}))))

(define $minors
  (lambda [$n]
    (let {[$X (generate-tensor (lambda [$i $j] x_i_j) {n 2})]}
      (generate-tensor
        (lambda [$i $j]
          (M.det (minor X {i j} {1 2}))) {n n}))))

(define $U (minors 4))

(define $v1 [|a b c d|])
(define $v2 [|e f g h|])
(define $V (df-normalize (wedge v1 v2)))

(define $plucker-index
  (lambda [$i $j]
    (match-all j (multiset integer) [<cons $a $as> [(append i {a}) as]])))
(plucker-index {1} {2 3 4})
;{[{1 2} {3 4}] [{1 3} {2 4}] [{1 4} {2 3}]}

(define $entry
  (lambda [%A $is]
    A_(nth 1 is)_(nth 2 is)))


(map (lambda [$t] (* (fst t) (snd t)))
     (map (lambda [$is] [(entry X (fst is)) (entry X (snd is))])
          (plucker-index {1} {2 3 4})))
;{(* x_1_2 x_3_4) (* x_1_3 x_2_4) (* x_1_4 x_2_3)}

(map (lambda [$t] (* (fst t) (snd t)))
     (map (lambda [$is] [(subrefs X (fst is)) (subrefs X (snd is))])
          (plucker-index {1} {2 3 4})))
;{(* x_1_2 x_3_4) (* x_1_3 x_2_4) (* x_1_4 x_2_3)}

(define $alternate-sum
  (lambda [$xs]
    (foldr - 0 xs)))

(define $plucker-relation
  (lambda [%X $i $j]
    (alternate-sum
                   (map (lambda [$t] (* (fst t) (snd t)))
                        (map (lambda [$is] [(entry X (fst is)) (entry X (snd is))])
                             (plucker-index i j))))))

(plucker-relation X {1} {2 3 4})
;(+ (* x_1_2 x_3_4) (* -1 x_1_3 x_2_4) (* x_1_4 x_2_3))
(plucker-relation U {1} {2 3 4})
;0
(plucker-relation V {1} {2 3 4})
;0

(define $entry3
  (lambda [%X $i] X_(nth 1 i)_(nth 2 i)_(nth 3 i)))

(define $plucker-relation3
  (lambda [%X $i $j]
    (alternate-sum
                   (map (lambda [$t] (* (fst t) (snd t)))
                        (map (lambda [$is] [(entry3 X (fst is)) (entry3 X (snd is))])
                             (plucker-index i j))))))

(plucker-relation3 A {1 2} {3 4 5 6})
;(+ (* A_1_2_3 A_4_5_6) (* -1 A_1_2_4 A_3_5_6) (* A_1_2_5 A_3_4_6) (* -1 A_1_2_6 A_3_4_5))

(define $plucker
  (lambda [%X $i $j]
    (alternate-sum
                   (map (lambda [$t] (* (fst t) (snd t)))
                        (map (lambda [$is]
                               [(M.det (minor X (fst is) (fst is)))
                                (M.det (minor X (snd is) (snd is)))])
                             (plucker-index i j))))))

(define $W
  ((lambda [$r $n]
     (generate-tensor (lambda [$i $j] w_i_j) {r n})) 3 6))

(alternate-sum
               (map (lambda [$t] (* (fst t) (snd t)))
                    (map (lambda [$is]
                           [(M.det (minor W {1 2 3} (fst is)))
                            (M.det (minor W {1 2 3} (snd is)))])
                         (plucker-index {1 2} {3 4 5 6}))))
;0